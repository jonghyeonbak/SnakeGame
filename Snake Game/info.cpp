//목차
//@제작 개요
//@기획
//@실행 화면
//@툴 제작 로드맵
//@단계별 프로
//
//
//@제작 개요
//툴의 제작 과정
//데이터 -> 수정 -> 업그레이드
//이전 버전 데이터를 변환
//
//툴을 제작할 때 데이터가 변하는 부분을 생각해서 
//여유분을 만들어야 함.
//
//@기획
//기획은 간단한 게 가장 좋다.
//
//스토리
//적 뱀을 피해다니면서 제한 시간 안에 사방에 떨어져 있는 먹이를 모두 먹어라
//
//게임 방식
//주인공 뱀은 다른 방향키를 누르기까지 현재 설정된 방향으로 계속 이동한다.
//주인 공 뱀과 적 캐릭터가 부딪히면 주인공 뱀의 꼬리는 하나씩 줄어들지만, 먹이를 먹으면 늘어남
//
//제한 사항
//제한시간 안에 먹어야 다음 스테이지로 넘어감. 기본 꼬리는 3개.
//꼬리가 없는 상태에 적에게 부딪히면 사망
//
//@게임 맵 툴
//1.열기
//2.저장
//3.map 정보 편집
//4.스테이지 정보 편집
//5.종료
//
//@편집 상태 : 블럭
//공백키
//설정키
//1.블럭
//2.먹이
//3.적
//4.주인공
//5.맵 전체 지우기
//6.메인메뉴로
//
//@스테이지 정보
//제한 시간: 50초
//적 캐릭터 수 : 5
//먹이 수 : 9
//
//@툴 제작 로드맵
//step 1  
//데이터 분석 -> 메인메뉴 결정(switch문) -> 메뉴화면 제작
//step 2
//map 편집 -> 캐릭터 위치정보 및 map 입력
//		 -> 캐릭터 위치 정보 및 map 수정
//		-> 캐릭터 위치 정보 및 MAP 삭제
//step 3
//스테이지 정보 -> 제한시간 입력 및 수정
//step 4
//파일 다루기 -> 파일 저장
//			-> 파일 읽기
//step 5
//테스트 및 디버깅 -> 완성
//
//#데이터 분석
//1.스테이지 정보
//- 적 캐릭터 개수
//- 스테이지의 제한 시간
//- 먹이 개수
//
//2.맵 정보
//- 맵 정보
//- 적 캐릭터의 위치 설정
//- 주인공의 위치 설정
//- 먹이 및 위치 설정
//
//ux적인 요소, 즉 항상 사용자의 입장에서 생각해서 만들자
//
//@구조체로 스테이지의 전체 정보 정의
//typedef struct_STAGE_INFO
//{
//	int nEnemyCount;   // Note: 적 캐틱터의 수
//	clock_t LimitTime; // Note: 스테이지의 제한 시간
//	int nEatCount;     // Note: 먹이 개수
//	int nMap[MAP_ROW][MAP_COL]; //Note: 맵 정보
//}STAGE_INFO;
//@맵 데이터
//맵 정보
//값             0       1      2        3
//의미	          블록    먹이    적     주인공
//출력 캐릭터     ■       ♥      ◎      ●
//
//@메인 메뉴
//1.파일 열기
//2.파일 저장
//3.Map 정보 편집
//4.스테이지의 정보 편집
//5.종료
//
//
